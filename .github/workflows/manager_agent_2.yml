name: ManagerAgent

on:
  issues:
    types: [opened, reopened, edited]     # run when an issue is created or updated

permissions:
  contents: write        # allow this workflow to push branches
  pull-requests: write   # allow it to open PRs

jobs:
  manage:
    if: github.event.issue.state == 'open'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 1) Build a prompt that includes the repo name and full issue text
      - name: Build prompt
        id: prompt
        run: |
          cat <<EOF > prompt.txt
          Repository: ${{ github.repository }}
          Issue #${{ github.event.issue.number }} – ${{ github.event.issue.title }}

          ${GITHUB_ISSUE_BODY:=${{ github.event.issue.body }}}
          EOF

      # 2) Call OpenAI; expect ONLY JSON: `[{"path":"file","content":"..."}]`
      - name: Generate files with OpenAI
        id: generate
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python - <<'PY'
          import json, openai, pathlib, os, sys, textwrap
          openai.api_key = os.environ["OPENAI_API_KEY"]

          with open("prompt.txt") as f:
              user_prompt = f.read()

          response = openai.ChatCompletion.create(
              model="gpt-4o-mini",
              messages=[
                {"role":"system","content":(
                  "You are an autonomous coding agent. "
                  "Read the user's instructions and respond ONLY with valid JSON—"
                  "an array of objects {\"path\":\"...\",\"content\":\"...\"}. "
                  "Do not add extra keys or any prose outside the JSON."
                )},
                {"role":"user","content":user_prompt}
              ],
              max_tokens=1500
          )

          files_json = response.choices[0].message.content.strip()
          try:
              files = json.loads(files_json)
          except json.JSONDecodeError:
              print("Model did not return valid JSON:", files_json)
              sys.exit(1)

          for f in files:
              path = pathlib.Path(f["path"])
              path.parent.mkdir(parents=True, exist_ok=True)
              path.write_text(f["content"])

          PY

      # 3) Commit the generated files and push a new branch
      - name: Commit & push branch
        run: |
          BRANCH="agent/${{ github.event.issue.number }}-${{ github.run_id }}"
          git checkout -b "$BRANCH"
          git add .
          git commit -m "Agent output for #${{ github.event.issue.number }}"
          # rewrite HTTPS URLs so git uses the built-in GITHUB_TOKEN
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git push -u origin "$BRANCH"

      # 4) Open a pull request back to main
      - name: Open pull request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "Agent PR for #${{ github.event.issue.number }}" \
            --body "Automated changes generated by ManagerAgent." \
            --head "$BRANCH" \
            --base main
